1，谈谈对volatitle关键字的理解
volatitle：是java虚拟机提供的轻量级的同步机制
  1, 保证可见性
  2，不保证原子性
  3，禁止指令重排
  多线程情况下，普通的变量是没有可见性的，加了volatile关键字可以保证可见性
如何解决原子性：加sync  ,使用juc下的AtomicInterger(底层是CAS)

2,JMM（java内存模型）你谈谈？
  硬盘<内存<cpu
   主内存：电脑内存，比如8g,16g
   自己的工作内存：比如每个线程从主内存中拷贝到各自线程的工作内存
   可见性：一个线程修改了主物理内存，其它线程也能看到
 JMM本身是一种抽象的概念，并不真实存在，它描述的是一组规范或者规则，通过这组规范定义了程序中各个变量（包括实例字段，静态字段和构成数组对象的元素）的访问方式
   JMM关于同步的规定：
      1，线程解锁前，必须把共享变量的值刷新回主内存
      2，线程加锁前，必须读取主内存的最新值到自己的工作内存
      3，加锁解锁是同一把锁
   JMM要求：可见性，原子性，有序性   
    线程安全保证
   
      
  由于jvm运行程序的实体是线程，而每个线程创建时，JVM都会为其创建一个工作内存，（有些地方称为栈空间），工作内存是每个线程的私有数据区域，而java
    内存模型中规定多有变量都存储在主内存，主内存是共享内存区域，所有线程都可以访问，但线程对变量的操作（读取赋值等）必须在工作内存中进行，首先要将
     变量从主内存拷贝到自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写回主内存，不能直接操作主内存中的变量，各个线程中的工作内存中存储
     着主内存中的变量副本拷贝，因此不同的线程间无法访问对方的工作内存，线程间的通信（传值）必须通过主内存来完成
     
     原子性指的是什么意思？不可分割，也即某个线程正在做某个具体业务时，中间不可以被加塞或者被分割，需要整体完整要么同时成功，要么同时失败
       number++在多线程下是非线程安全的
       
 计算机在执行程序时，为了提高性能，编译器和处理器的常常会对指令做重排，一般分为三种
   源代码-》编译器优化的重排-》指令并行的重排-》内存系统的重排-》最终执行的指令
  单线程环境里面确保程序最终执行结果和代码顺序执行的结果一致
  处理器在进行重排序
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
