1：springmvc中只使用一个容器是否可以？

只使用一个容器是可以正常运行的。

2：那么springmvc中为什么需要用到父子容器？

通常我们使用springmvc的时候，采用3层结构，controller层，service层，dao层；父容器中会包含dao层和service层，而子容器中包含的只有controller层；这2个容器组成了父子容器的关系，controller层通常会注入service层的bean。

采用父子容器可以避免有些人在service层去注入controller层的bean，导致整个依赖层次是比较混乱的。

父容器和子容器的需求也是不一样的，比如父容器中需要有事务的支持，会注入一些支持事务的扩展组件，而子容器中controller完全用不到这些，对这些并不关心，子容器中需要注入一下springmvc相关的bean，而这些bean父容器中同样是不会用到的，也是不关心一些东西，将这些相互不关心的东西隔开，可以有效的避免一些不必要的错误，而父子容器加载的速度也会快一些。
3.常见异常：
    故障现象：java.util.ConcurrentMododification
    导致原因：并发争抢修改导致，一个人正在写入，另外一个同学过来抢夺，导致数据异常不一致
    解决方案：
        Vector<String> list = new Vector<>();
        List<String> list1 = Collections.synchronizedList(new ArrayList<>());
    优化建议（同样的错误不犯第二次）
4问题：Synchronized和lock有什么区别？用新的lock有什么好处？举例说明
  1，原始构成
    Synchronized 是关键字属于JVM层面
        monitorenter(底层是通过monitor对象来完成，其实wait/notify等方法也依赖于monitor对象只有在同步块或方法种才能调用wait/notify等方法
        monitorexit
    Lock 是具体类（java.util.concurrent.locks.lock)是api层次的锁
 2，使用方法
    Synchronized 不需要用户去手动释放锁，当Synchronized代码执行完后，系统会自动让线程释放对锁的占用
    ReentrantLock则需要用用户手动释放锁，若没有主动释放锁，就有可能导致出现死锁现象
    需要lock()和unlock()方法配合try/finally语句块来完成
  3，等待是否可中断
      Synchronized不可中断，除非抛出异常或者正常运行完成
      ReentranLock可中断， 1，设置超时方法trylock(long timeout,TimeUnit unit)
                           2,lockInterruptibly()放代码块种调用interrupt()方法可中断
  4，加锁是否公平
     Synchronized 非公平锁
     ReentrantLock 两者都可以，默认非公平锁，构造方法可以传入boolean值，true为公平锁，false为非公平锁
  5，锁绑定多个Condition
     Synchronized没有
     ReentrantLock用来实现分组唤醒需要唤醒的线程们，可以精确唤醒，而不是像Synchronized要么随机唤醒一个要么唤醒全部线程
  6,定制线程通信
                //定制线程通信
        public class ThreadResource {
            private int flag = 1;//1  2  3
          private Lock lock =   new ReentrantLock();
            private Condition c1 = lock.newCondition();
            private Condition c2 = lock.newCondition();
            private Condition c3 = lock.newCondition();

            public void print5(){
                lock.lock();
               try {
                   while (flag!=1){
                       c1.await();
                   }
                   for (int i = 0; i < 5; i++) {
                       System.out.println(Thread.currentThread().getName()+"\t"+"A");
                   }
                   flag=2;
                   c2.signal();
               }catch (Exception e){
                   e.printStackTrace();
               }finally {
                lock.unlock();
               }
            }
            public void print10() {
                lock.lock();
                try {
                    while (flag != 2) {
                        c2.await();
                    }
                    for (int i = 0; i < 10; i++) {
                        System.out.println(Thread.currentThread().getName() + "\t" + "A");
                    }
                    flag = 3;
                    c3.signal();
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    lock.unlock();
                }
            }
           public void print15(){
                lock.lock();
               try {
                   while (flag!=3){
                       c3.await();
                   }
                   for (int i = 0; i <15 ; i++) {
                       System.out.println(Thread.currentThread().getName()+"\t"+"A");
                   }

                   flag=1;
                   c1.signal();
               }catch (Exception e){
                   e.printStackTrace();
               }finally {
                lock.unlock();
               }

            }

            public static void main(String[] args) {
                ThreadResource t = new ThreadResource();
                new Thread(()->{
                    t.print5();
                },"1线程").start();
                new Thread(()->{
                    t.print10();
                },"2线程").start();
                new Thread(()->{
                    t.print15();
                },"3线程").start();
            }
        }
  7，冒泡算法：
               public static void main(String[] args) {
                int arr[] = {2,5,6,8,4,9,3};
                for (int i = 0; i <=arr.length-1 ; i++) {
                    System.out.println(arr[i]);

                }


                for (int i = 0; i <arr.length-1 ; i++) {
                    for (int j = 0; j <arr.length-i-1 ; j++) {

                        if (arr[j]>arr[j+1]){
                            int  temp= arr[j];
                            arr[j]=arr[j+1];
                            arr[j+1]=temp;
                        }
                    }
                }
                System.out.println("================================排序后");
                for (int i = 0; i <=arr.length-1 ; i++) {
                    System.out.println(arr[i]);

                }
            }
        }

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
     
