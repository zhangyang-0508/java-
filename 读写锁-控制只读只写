import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantReadWriteLock;

/*
未加锁之前结果
1	 正在写入：1
4	 正在写入：4
3	 正在写入：3
5	 正在写入：5
2	 正在写入：2
1	 正在读取：1
2	 正在读取：2
4	 正在读取：4
3	 正在读取：3
5	 正在读取：5
1	 写入完成：
4	 写入完成：
2	 读取完成：2
1	 读取完成：1
2	 写入完成：
5	 写入完成：
3	 读取完成：3
4	 读取完成：null
5	 读取完成：null
3	 写入完成：
=================================
加读写锁后，写操作别严格控制
1	 正在写入：1
1	 写入完成：
5	 正在写入：5
5	 写入完成：
3	 正在写入：3
3	 写入完成：
4	 正在写入：4
4	 写入完成：
2	 正在写入：2
2	 写入完成：
1	 正在读取：1
2	 正在读取：2
3	 正在读取：3
4	 正在读取：4
5	 正在读取：5
4	 读取完成：4
1	 读取完成：1
3	 读取完成：3
5	 读取完成：5
2	 读取完成：2

Process finished with exit code 0

 */
class MyCache {//模拟redis缓存
    private volatile Map<String, Object> map = new HashMap<>();
    private ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();

    public void put(String key, Object value) {
        rwLock.writeLock().lock();
        try {
            System.out.println(Thread.currentThread().getName() + "\t 正在写入：" + key);
            //暂停一会线程
            try {
                TimeUnit.MICROSECONDS.sleep(300);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            map.put(key, value);
            System.out.println(Thread.currentThread().getName() + "\t 写入完成：");

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            rwLock.writeLock().unlock();
        }


    }

    public void get(String key) {
        rwLock.readLock().lock();
        try{
            System.out.println(Thread.currentThread().getName() + "\t 正在读取：" + key);
            //暂停一会线程
            try {
                TimeUnit.MICROSECONDS.sleep(300);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            Object result = map.get(key);
            System.out.println(Thread.currentThread().getName() + "\t 读取完成：" + result);
        } catch (Exception e) {
            e.printStackTrace();
        } finally{
            rwLock.readLock().unlock();
        }


    }
}


//读占锁（写锁）/共享锁（读写）/互斥锁  读写锁
    /*
    多个线程想去写共享资源来，就不应该再有其他线程可以对该资源进行读或者写
    小总结：
        读-读不能共存
        读-写不能共存
        写- 写不能共存

        写操作：原子+独占，整个过程必须是完整的统一体，中间不许被分割被打断
     */
public class ReadWriterLockDemo {
    public static void main(String[] args) {
        MyCache myCache = new MyCache();
        for (int i = 1; i <= 5; i++) {
            int tempInt = i;
            new Thread(() -> {
                myCache.put(tempInt + "", tempInt + "");
            }, String.valueOf(i)).start();

        }
        for (int i = 1; i <= 5; i++) {
            int tempInt = i;
            new Thread(() -> {
                myCache.get(tempInt + "");
            }, String.valueOf(i)).start();

        }
    }
}
