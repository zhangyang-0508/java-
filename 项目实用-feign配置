@Slf4j
public class RequestHeaderInterceptorConfiguration implements RequestInterceptor {

    public static String getRemoteAddr() {
        try {
            String remoteAddr = getRequest().getHeader("X-Real-IP");
            if (StringUtils.isNotBlank(remoteAddr)) {
                remoteAddr = getRequest().getHeader("X-Forwarded-For");
            } else if (StringUtils.isNotBlank(remoteAddr)) {
                remoteAddr = getRequest().getHeader("Proxy-Client-IP");
            } else if (StringUtils.isNotBlank(remoteAddr)) {
                remoteAddr = getRequest().getHeader("WL-Proxy-Client-IP");
            }

            return remoteAddr != null ? remoteAddr : getRequest().getRemoteAddr();
        } catch (Exception var1) {
            return "";
        }
    }

    public static HttpServletRequest getRequest() {
        try {
            return ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
        } catch (Exception var1) {
            return null;
        }
    }

    @Override
    public void apply(RequestTemplate template) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        if (attributes != null) {
            HttpServletRequest request = attributes.getRequest();
            String values = request.getHeader(HeaderParamEnum.OAUTH_AUTHTOKEN.getName());
            template.header(HeaderParamEnum.OAUTH_AUTHTOKEN.getName(), values);
            template.header(com.yl.api.enums.HeaderParamEnum.LANG_TYPE.getName(), request.getHeader(com.yl.api.enums.HeaderParamEnum.LANG_TYPE.getName()));
            Object attribute = request.getAttribute(LoginUserUtils.LOGIN_USER);
            if(attribute!=null){
                try {
                    String value = JSONObject.toJSON(attribute).toString();
                    template.header("LOGIN_USER",value);
                    template.header("login_user",value);
                } catch (Exception e) {
                }
            }

            Enumeration<String> headerNames = request.getHeaderNames();
            if (headerNames != null) {
                while (headerNames.hasMoreElements()) {
                    String name = headerNames.nextElement();
                    String v = request.getHeader(name);
                    template.header(name, v);

                }
            }

            String remoteAddr = getRemoteAddr();
            log.info("远程地址:{}", remoteAddr);
            if (StringUtils.isNotEmpty(remoteAddr)) {
                template.query("request_ip", new String[]{remoteAddr});
            }

            if (request.getParameter(PageCons.PAGE_CURRENT) != null) {
                if (CollectionUtils.isEmpty(template.queries().get(PageCons.PAGE_CURRENT))) {
                    template.query(PageCons.PAGE_CURRENT, request.getParameter(PageCons.PAGE_CURRENT));
                }
            }
            if (request.getParameter(PageCons.PAGE_SIZE) != null) {
                if (CollectionUtils.isEmpty(template.queries().get(PageCons.PAGE_SIZE))) {
                    template.query(PageCons.PAGE_SIZE, request.getParameter(PageCons.PAGE_SIZE));
                }
            }
            log.debug("feign interceptor header:{}", template);
        }
    }
}








@Configuration
public class FeignConfig extends RequestHeaderInterceptorConfiguration {

    @Value("${feign.connectTimeout:5000}")
    public int connectTimeOutMillis;

    @Value("${feign.readTimeout:20000}")
    public int readTimeOutMillis;

    @Bean
    public Request.Options options() {
        return new Request.Options(connectTimeOutMillis, readTimeOutMillis);
    }

    @Bean
    public Retryer feignRetryer() {
        return Retryer.NEVER_RETRY;
    }

    @Bean
    Level feignLoggerLevel() {
        return Level.BASIC;
    }
}
