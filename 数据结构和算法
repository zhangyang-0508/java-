KMP算法（部分匹配表）
数据结构和算法关系
程序 = 数据结构+算法

五子棋程序判断输赢，存盘退出和继续上局功能
   棋盘=》二维数组=》（稀疏数组）=》写入文件（存档功能）
   读取文件=》稀疏数组=》二维数组=》棋盘 （接上局）
约瑟夫（Josephu)问题（丢手帕问题）
   提示：用一个不带头结点的循环链表来处理约瑟夫问题：先构成一个有n个结点的单循环链表（单向环形链表），然后由k结点从1开始计数，计到m时，对应结点从链表中删除，
     然后再从被删除结点的下一个结点又从1开始计数，直到最后一个结点从链表中删除算法结束
实际编程中遇到的问题：
   修路问题：  =》最小生成树（加权值）【数据结构】+普利姆算法
   最短路径问题  =》图+弗洛伊德算法
   汉诺塔  =》分支算法
   八皇后问题 =》回溯法
 数据结构： 线性结构和非线性结构
  线性结构：两种不同的存储结构 顺序存储结构（数组）和链式存储结构（链表）  顺式存储的线性表称为顺序表，顺序表中的存储元素是连续的
                              链式存储的线性表称为链表，链表中存储元素不一定是连续的，元素的节点中存放数据元素以及相邻元素的地址信息
            线性结构常见的有：数组，队列，链表和栈
            非线性结构包括：二维数组，多维数组，广义表，树结构，图结构
  稀疏数组：
    row  col  val
  0 11    11   2
  1  1     2   2
  2  2     2    2
用稀疏数组，五子棋实现存档
 //创建一个二位数组11*11
        int chessArr1[][] = new int[11][11];
        chessArr1[1][2]=1;
        chessArr1[2][3]=2;
        //输出原始的二维数组
        System.out.println("原始的二维数组");
        for (int[] row:chessArr1) {
            for (int data:row
                 ) {
                //System.out.println(data);
                System.out.printf("%d\t",data);
            }
            System.out.println();

        }
        //将二维数组 转 稀疏数组的思路
        //1，先遍历二维数组，得到非0数据的个数
        int sum = 0;
        for (int i = 0; i < 11; i++) {
            for (int j = 0; j < 11; j++) {
                if (chessArr1[i][j]!=0){
                    sum++;
                }
            }
        }
        System.out.println("sum="+sum);
        //创建对应稀疏数组
        int sparseArr[][] = new int[sum+1][3];
        //给稀疏数组赋值
        sparseArr[0][0]=11;
        sparseArr[0][1]=11;
        sparseArr[0][2]=sum;
        //遍历二维数组，将非0的值放入sparseArr中
        int count = 0 ; //count用于记录是第几个非0的值
        for (int i = 0; i < 11; i++) {
            for (int j = 0; j < 11; j++) {
                if (chessArr1[i][j]!=0){
                    count++;
                    sparseArr[count][0]=i;
                    sparseArr[count][1]=j;
                    sparseArr[count][2]=chessArr1[i][j];
                }
            }
        }
        System.out.println();
        System.out.println("得到的稀疏数组为~~");
        for (int i = 0; i < sparseArr.length; i++) {
            System.out.printf("%d\t%d\t%d\t\n",sparseArr[i][0],sparseArr[i][1],sparseArr[i][2]);
        }
        //将稀疏数组恢复成原始的二维数组
        //1,先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组
        int chessArr2[][] = new int[sparseArr[0][0]][sparseArr[0][1]];
        //在读取稀疏数组后几行的数据（从二行开始），并赋值给原始的二维数组
        for (int i =1; i < sparseArr.length; i++) {
            chessArr2[sparseArr[i][0]][sparseArr[i][1]]=sparseArr[i][2];

        }
        //输出恢复后的二维数组
        System.out.println();
        System.out.println("会复后的二维数组");
        for (int[] row  :chessArr2 ){
            for (int data :
                    row) {
                System.out.printf("%d\t",data);

            }
            System.out.println();
        }
    }
   
