import java.util.concurrent.CountDownLatch;

/**
 * CountDownLatch 做减法  可以让所有线程都执行完，countDownLatch.countDown();计数减 减到0  最后再执行main方法（最后的方法）
 */
public class CountDownLatchDemo {
    public static void main(String[] args) throws InterruptedException {
        //关门案例
        /*CountDownLatch countDownLatch = new CountDownLatch(6);
        for (int i = 1; i <=6 ; i++) {
            new Thread(()->{
                System.out.println(Thread.currentThread().getName()+"\t 离开教室");
                countDownLatch.countDown();
            },String.valueOf(i)).start();

        }


        countDownLatch.await();
        System.out.println(Thread.currentThread().getName()+"\t  离开教室锁门");*/
        //秦灭六国案例
        CountDownLatch countDownLatch = new CountDownLatch(6);
         for (int i = 1; i <= 6; i++) {
                     new Thread(() -> {
                         System.out.println(Thread.currentThread().getName()+"\t 国，被灭");
                         countDownLatch.countDown();
                     }, CountryEnum.forEach_CountryEunm(i).getRetMessage()).start();
           }
         countDownLatch.await();
        System.out.println("秦一统六国");
    }


}
