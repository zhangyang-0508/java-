1.yml文件获取：类属性和配置文件属性映射
   批量绑定： @configurationProperties（prefix="Person"）默认从全局配置文件中的值 告诉springboot 将本类中所有属性和配置文件中相关属性映射 配置文件中哪个下面的所有属性进行一一映射
            只有这个组件时容器中的组件，才能容器提供这个功能，加@conmponet  支持jsr303数据校验@Validated类，@Email属性 对配置文件注入值进行校验
           导入配置文件处理器spring-boot-configuration-processor  配置文件进行绑定就会有提示
          properties文件类似
2.单个绑定：  @Value("${person.属性名}")   不支持数据校验，不支持复杂类型注入
用法：
  如果只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value
  如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties


@PropertySource(value={classpath:person.properties}) 获取指定配置你文件的值

@ImportResource 导入Spring的配置文件，让配置文件里面的内容生效
springboot里面没有spring的配置文件，我们自己编写的配置文件，也不能自动识别，想让spring的配置文件生效，加载进来，@importResource(location={})标注在一个配置类上
springboot 推荐给容器中添加组件的方式，推荐全注解的方式，加上@configuration 指明当前类是个配置类，就是来代替之前的spring配置文件 在配置文件中用<bean><bean/>标签添加组件
@Bean 将方法的返回值添加到容器中，容器中这个组件默认的id就是方法名

Profile 多环境配置  默认使用 application.properties配置

---yml中分割文档块
server:
 port:8081
Spring:
 profiles:
  active: dev
---
server:
 port:8083
spring:
 profiles:dev
 ---
 server:
 port:8083
spring:
 profiles:prod
 

激活指定profile
在配置文件中指定 Spring.profile.active = dev

命令行指定Java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev或者虚拟机参数 -Dspring.profie.active=dev
17课时
